import osfrom PIL import Imageimport PILfrom tqdm import tqdmimport randomimport cv2import numpy as npimport pandas as pdimport timefrom PIL import Image, ImageOpsfrom shutil import copyfileimport matplotlib.pyplot as pltimport SimpleITK as sitkdef move_resize(from_dir = '../data/test',                to_dir='../data/test_256'):    # os.makedirs(to_dir)    for img_name in tqdm(os.listdir(from_dir)):        if img_name.endswith('jpeg') or img_name.endswith('jpg'):            img_path_from = os.path.join(from_dir,img_name)            img_path_to = os.path.join(to_dir,img_name)            img = Image.open(img_path_from).resize((256,256),PIL.Image.BILINEAR)            img.save(img_path_to)def train_test_split_CT():    train_ratio = 0.8    cov_dir = '../COVID-CT/CT_COVID'    noncov_dir = '../COVID-CT/CT_NonCOVID'    luna_train_dir = '../LUNA/train'    luna_test_dir = '../LUNA/test'    train_dir = '../COVID-CT/train_256'    test_dir = '../COVID-CT/test_256'    os.makedirs(train_dir)    os.makedirs(test_dir)    cov_list = [img_name for img_name in os.listdir(cov_dir) if img_name.endswith('png')]    noncov_list = [img_name for img_name in os.listdir(noncov_dir) if img_name.endswith('png')]    luna_train_list = [img_name for img_name in os.listdir(luna_train_dir) if img_name.endswith('png')]    luna_test_list = [img_name for img_name in os.listdir(luna_test_dir) if img_name.endswith('png')]    random.shuffle(cov_list)    random.shuffle(noncov_list)    random.shuffle(luna_train_list)    random.shuffle(luna_test_list)    cov_number, non_cov_number = len(cov_list), len(noncov_list)    train_cov_list, test_cov_list = [], []    for n in cov_list:        p = int(n.split('-')[1][1:])        print(p)        if  p <= 23:            train_cov_list.append(n)        else:            test_cov_list.append(n)    train_noncov_list, test_noncov_list = noncov_list[:int(train_ratio*non_cov_number)],noncov_list[int(train_ratio*non_cov_number):]    train_luna_list, test_luna_list = luna_train_list, luna_test_list    for img_name in tqdm(train_cov_list):        img_path_from = os.path.join(cov_dir,img_name)        img_path_to = os.path.join(train_dir,img_name)        img = Image.open(img_path_from).resize((256,256),PIL.Image.BILINEAR)        img.save(img_path_to)    for img_name in tqdm(test_cov_list):        img_path_from = os.path.join(cov_dir,img_name)        img_path_to = os.path.join(test_dir,img_name)        img = Image.open(img_path_from).resize((256,256),PIL.Image.BILINEAR)        img.save(img_path_to)    for img_name in tqdm(train_noncov_list):        img_path_from = os.path.join(noncov_dir, img_name)        img_path_to = os.path.join(train_dir, img_name)        img = Image.open(img_path_from).resize((256, 256), PIL.Image.BILINEAR)        img.save(img_path_to)    for img_name in tqdm(test_noncov_list):        img_path_from = os.path.join(noncov_dir, img_name)        img_path_to = os.path.join(test_dir, img_name)        img = Image.open(img_path_from).resize((256, 256), PIL.Image.BILINEAR)        img.save(img_path_to)    for img_name in tqdm(train_luna_list):        img_path_from = os.path.join(luna_train_dir, img_name)        img_path_to = os.path.join(train_dir, img_name)        img = Image.open(img_path_from).resize((256, 256), PIL.Image.BILINEAR)        img.save(img_path_to)    for img_name in tqdm(test_luna_list):        img_path_from = os.path.join(luna_test_dir, img_name)        img_path_to = os.path.join(test_dir, img_name)        img = Image.open(img_path_from).resize((256, 256), PIL.Image.BILINEAR)        img.save(img_path_to)    train_label = ['{} {}'.format(img_name, 0) for img_name in train_cov_list] + \                  ['{} {}'.format(img_name, 1) for img_name in train_noncov_list]+ \                  ['{} {}'.format(img_name, 1) for img_name in train_luna_list]    test_label = ['{} {}'.format(img_name, 0) for img_name in test_cov_list] + \                  ['{} {}'.format(img_name, 1) for img_name in test_noncov_list]+ \                 ['{} {}'.format(img_name, 1) for img_name in test_luna_list]    random.shuffle(train_label)    random.shuffle(test_label)    train_label = '\n'.join(train_label)    test_label = '\n'.join(test_label)    with open('train_CT.txt','w') as f:        f.write(train_label)    f.close()    with open('test_CT.txt','w') as f:        f.write(test_label)    f.close()def LUNA_split():    raw_dir = 'F:\covid-19\COVID-CT\dataset_5_1\seg-lungs-LUNA16'    to_dir = 'F:\covid-19\COVID-CT\dataset_5_1\seg-lungs-LUNA16_select'    img_list = [img_name for img_name in os.listdir(raw_dir) if img_name.endswith('mhd')]    # os.makedirs(to_dir)    for meta_name in tqdm(img_list):        meta_path_from = os.path.join(raw_dir,meta_name)        itkimage = sitk.ReadImage(meta_path_from)        numpyImage = sitk.GetArrayFromImage(itkimage)        sliced_list = range(int(numpyImage.shape[0]/5),int(4*numpyImage.shape[0]/5),20)        for i in sliced_list:            img_path_to = os.path.join(to_dir, '{}_{}.png'.format(meta_name, i))            img = numpyImage[i]            img = normalize(img)            plt.imsave(img_path_to,img,cmap=plt.cm.gray)def LUNA_mask_split():    raw_dir = 'F:\covid-19\COVID-CT\dataset_5_1\seg-lungs-LUNA16'    to_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train_mask'    img_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train'    img_list = [[img_name.split('_')[0],int(img_name.split('_')[1].split('.')[0])] for img_name in os.listdir(img_dir) if img_name.endswith('png')]    # os.makedirs(to_dir)    for meta_name in tqdm(img_list):        print(meta_name)        meta_path_from = os.path.join(raw_dir,meta_name[0])        itkimage = sitk.ReadImage(meta_path_from)        numpyImage = sitk.GetArrayFromImage(itkimage)        img_path_to = os.path.join(to_dir, '{}_{}.png'.format(meta_name[0], meta_name[1]))        img = numpyImage[meta_name[1]]        img = normalize(img)        plt.imsave(img_path_to,img,cmap=plt.cm.gray)def test_roc():    import numpy as np    from sklearn.metrics import roc_auc_score    import matplotlib.pyplot as plt    y = np.array([0, 0, 1, 1])    scores = np.array([1, 1, 1, 0])    auc = roc_auc_score(y, scores)    print(auc)    y = np.array([0, 0, 1, 1])    scores = np.array([0.8, 0.7, 0.8, 0])    auc = roc_auc_score(y, scores)    print(auc)def create_spread_sheet():    img_list = os.listdir('F:\covid-19\COVID-CT\dataset_3_31\LUNA_data\LUNA_new\CT_NonCOVID')    data = {'image name':[],            'patient id':[]}    for img_name in img_list:        patient_id = img_name.split('.mhd')[0]        data['image name'].append(img_name)        data['patient id'].append(patient_id)    print(len(set(data['patient id'])))    df = pd.DataFrame(data)    df.to_csv('CT_NonCOVID.csv')def test_inter():    train_set = set(os.listdir('F:\covid-19\COVID-CT\dataset_4_1\d2\\train'))    test_set = set(os.listdir('F:\covid-19\COVID-CT\dataset_4_1\d2\\test'))    val_set = set(os.listdir('F:\covid-19\COVID-CT\dataset_4_1\d2\\val'))    print(train_set.intersection(test_set),test_set.intersection(val_set),val_set.intersection(train_set))def to_txt():    n = 'F:\covid-19\COVID-CT\data_4_3'    for set in ['train', 'val', 'test']:        name = os.path.join(n,set)        list = [img_name for img_name in os.listdir(name) if img_name.endswith('png') or img_name.endswith('jpg')]        with open(os.path.join(n,set)+'.txt','w') as f:            f.write('\n'.join(list))def to_txt2():    n = 'F:\covid-19\COVID-CT\dataset_3_31\LUNA_data\LUNA_new'    for set in ['train', 'val', 'test']:        for label in ['CT_COVID','CT_NonCOVID']:            name = os.path.join(n,set+'_set',label)            list = [img_name for img_name in os.listdir(name) if img_name.endswith('png')]            with open(os.path.join(n,set+label)+'.txt','w') as f:                f.write('\n'.join(list))def negative_split():    random.seed(time.time())    source = 'F:\covid-19\COVID-CT\dataset_3_31\LUNA_data\LUNA_new\CT_NonCOVID'    dst = 'F:\covid-19\COVID-CT\dataset_4_1\d3'    img_list = os.listdir(source)    train_dst = os.path.join(dst, 'train')    val_dst = os.path.join(dst, 'val')    test_dst = os.path.join(dst, 'test')    os.makedirs(train_dst)    os.makedirs(val_dst)    os.makedirs(test_dst)    patient_ids = list(set([img_name.split('.mhd')[0] for img_name in img_list]))    num_p = len(patient_ids)    random.shuffle(patient_ids)    train_ids, val_ids, test_ids = patient_ids[:int(0.6*num_p)],\                                   patient_ids[int(0.6*num_p):int(0.75*num_p)],\                                   patient_ids[int(0.75*num_p):]    for img_name in img_list:        patient_id = img_name.split('.mhd')[0]        if patient_id in train_ids:            copyfile(os.path.join(source,img_name), os.path.join(train_dst, img_name))        if patient_id in val_ids:            copyfile(os.path.join(source,img_name), os.path.join(val_dst, img_name))        if patient_id in test_ids:            copyfile(os.path.join(source,img_name), os.path.join(test_dst, img_name))def combine_txt():    for i in [1,2,3]:        for set in ['train', 'val', 'test']:            p_txt = ['{} {}'.format(item, 0) for item in read_txt('F:\covid-19\COVID-CT\dataset_4_1\\{}\\{}{}.txt'.format(i,set,i))]            n_txt = ['{} {}'.format(item, 1) for item in read_txt('F:\covid-19\COVID-CT\dataset_4_1\\d{}\\{}.txt'.format(i,set))]            with open('{}{}.txt'.format(set,i), 'w') as f:                f.write('\n'.join(p_txt+n_txt))def read_txt(txt_path):    with open(txt_path) as f:        lines = f.readlines()    txt_data = [line.strip() for line in lines]    return txt_datadef old_negative():    df = pd.read_csv('C:\\Users\pc\Documents\WeChat Files\\x787707188\FileStorage\File\\2020-04\medpix_final.csv')    img_list_ids = [int(item.split('.')[0]) for item in os.listdir('F:\covid-19\COVID-CT\CT_NonCOVID')]    pat_ids= []    for index, row in df.iterrows():        if row[0] in img_list_ids:            pat_ids.append(row[2])    pat_ids_set = list(set(pat_ids))    random.shuffle(pat_ids_set)    num_p = len(pat_ids_set)    train_ids, val_ids, test_ids = pat_ids_set[:int(0.6 * num_p)], \                                   pat_ids_set[int(0.6 * num_p):int(0.75 * num_p)], \                                   pat_ids_set[int(0.75 * num_p):]    train_list = []    val_list = []    test_list = []    for index, row in df.iterrows():        if row[2] in train_ids and row[0] in img_list_ids:            train_list.append('{}.png'.format(row[0]))    for index, row in df.iterrows():        if row[2] in val_ids and row[0] in img_list_ids:            val_list.append('{}.png'.format(row[0]))    for index, row in df.iterrows():        if row[2] in test_ids and row[0] in img_list_ids:            test_list.append('{}.png'.format(row[0]))    with open('trainCT_NonCOVID.txt', 'w') as f:        f.write('\n'.join(train_list))    with open('valCT_NonCOVID.txt', 'w') as f:        f.write('\n'.join(val_list))    with open('testCT_NonCOVID.txt', 'w') as f:        f.write('\n'.join(test_list))def to_meta():    # df = pd.read_csv('C:\\Users\pc\Documents\WeChat Files\\x787707188\FileStorage\File\\2020-04\medpix_final.csv')    # img_list_ids = [int(item.split('.')[0]) for item in os.listdir('F:\covid-19\COVID-CT\CT_NonCOVID')]    #    # pat_ids = []    # for index, row in df.iterrows():    #     if row[0] in img_list_ids:    #         pat_ids.append(row[2])    #    # pat_ids_set = list(set(pat_ids))    # random.shuffle(pat_ids_set)    # num_p = len(pat_ids_set)    pat_ids_meta_list = []    image_meta_list = []    # for index, row in df.iterrows():    #     if  row[0] in img_list_ids:    #         pat_ids_meta_list.append('medpix_patient_{}'.format(pat_ids_set.index(row[2])))    #         image_meta_list.append('{}.png'.format(row[0]))    img_list_ids = os.listdir('F:\covid-19\COVID-CT\data_4_3\\NonCOVID\\NonCOVID')    for img in img_list_ids:        pid = img.split('.')[0].split('%')[0]        pat_ids_meta_list.append('crawled_patient_{}'.format(pid))        image_meta_list.append(img)    meta_dict = {        'image name':image_meta_list,        'patient id':pat_ids_meta_list    }    meta_df = pd.DataFrame.from_dict(meta_dict)    meta_df.to_csv('CT_NonCOVID_crawled.csv')def patient_split():    df = pd.read_csv('CT_NonCOVID.csv')    all_p = set(list(df['patient id']))    print(len(all_p))    pid = []    img_list_ids = [line.strip() for line in open('F:\covid-19\COVID-CT\dataset_4_4\\4_4_txt_crop\\valCT_NonCOVID.txt').readlines()]    for index, row in df.iterrows():        if row['image name'] in img_list_ids:            pid.append(row['patient id'])    p_dict = {'patient id':list(set(pid))}    meta_df = pd.DataFrame.from_dict(p_dict)    meta_df.to_csv('CT_NonCOVID_val_id.csv')    print(len(set(pid)))    # train 105    # val 24    # test 42def test_process():    img = cv2.imread('F:\covid-19\COVID-CT\dataset_3_31\LUNA_data\LUNA_new\\train\\1.3.6.1.4.1.14519.5.2.1.6279.6001.241570579760883349458693655367.mhd_185.png', 0)    # img = cv2.imread('F:\covid-19\COVID-CT\CT_COVID\\2020.01.24.919183-p27-133.png', 0)    #    gamma = adjust_gamma(img)    clahe = cv2.createCLAHE(clipLimit=2, tileGridSize=(8, 8))    equ = clahe.apply(gamma)    # equ = cv2.equalizeHist(gamma)    res = np.hstack((img,gamma, equ))  # stacking images side-by-side    cv2.imshow('ww',res)    cv2.waitKey(0)def process():    old_dir_name = '../data/COVID_Images/CT_NonCOVID'    dir_name = '../data/COVID_Images_gamma/CT_NonCOVID'    print(old_dir_name,dir_name)    for name in tqdm(os.listdir(old_dir_name)):        old_path = os.path.join(old_dir_name,name)        new_path = os.path.join(dir_name,name)        img = cv2.imread(old_path, 0)        gamma = adjust_gamma(img)        clahe = cv2.createCLAHE(clipLimit=2, tileGridSize=(8, 8))        equ = clahe.apply(gamma)        cv2.imwrite(new_path,equ)def adjust_gamma(image, gamma=2.2):    # build a lookup table mapping the pixel values [0, 255] to    # their adjusted gamma values    invGamma = 1.0 / gamma    table = np.array([((i / 255.) ** invGamma) * 255for i in np.arange(0, 256)]).astype("uint8")    table[table<0] = 0    # apply gamma correction using the lookup table    return cv2.LUT(image, table)def normalize(image):    MIN_BOUND = -300.0    MAX_BOUND = 1200.0    image = (image - MIN_BOUND) / (MAX_BOUND - MIN_BOUND)    image[image > 1] = 1.    image[image < 0] = 0.    return imagedef dicom2jpg(rootDir, dstDir):    import os    import pydicom    import scipy    import pathlib    from imageio import imsave    if rootDir[-1] is '/':        rootDir = rootDir[:-1]    for root, dirs, files in os.walk(rootDir):        for f in files:            # if f.endswith('dcm'):            new_root = root.replace(rootDir, dstDir)            pathlib.Path(new_root).mkdir(parents=True, exist_ok=True)            in_path = os.path.join(root, f)            out_path = os.path.join(new_root, f.replace('.dcm', '.jpg'))            # try:            image = pydicom.dcmread(in_path)  # 读取.dcm文件            imsave(out_path, normalize(image.pixel_array))            # except:            #     passdef jpgout(rootDir, dstDir):    import os    import shutil    if rootDir[-1] is '/':        rootDir = rootDir[:-1]    count = 0    for root, dirs, files in os.walk(rootDir):        for f in files :            if f.endswith('jpg'):                name_id = root.split('\\')[-3:]                print(name_id,f)                shutil.copyfile(os.path.join(root,f), os.path.join(dstDir,"{}_{}".format('_'.join(name_id),f)))    print(count)def select():    a=open('a.txt')    lines = a.readlines()    s =random.sample(lines,100)    b = open('b.txt','w')    b.writelines(s)def fuse_data():    labels = []    covid_names = []    noncovid_names = []    for txt_name in ['trainCT_COVID.txt','testCT_COVID.txt','valCT_COVID.txt']:        with open(os.path.join('F:\covid-19\COVID-CT\dataset_4_4\\4_4_txt_crop',txt_name)) as f:            covid_names += [os.path.join('F:\covid-19\COVID-CT\dataset_4_4\\4_4_data_crop\CT_COVID',line.strip()) for line in f.readlines()]    for txt_name in ['trainCT_NonCOVID.txt', 'testCT_NonCOVID.txt', 'valCT_NonCOVID.txt']:        with open(os.path.join('F:\covid-19\COVID-CT\dataset_4_4\\4_4_txt_crop',txt_name)) as f:            noncovid_names += [os.path.join('F:\covid-19\COVID-CT\dataset_4_4\\4_4_data_crop\CT_NonCOVID', line.strip()) for                          line in f.readlines()]    random.shuffle(covid_names)    random.shuffle(noncovid_names)    num_img = len(covid_names) + len(noncovid_names)    img_names = []    covid_id= 0    noncovid_id = 0    balance = 0    for i in range(num_img):        if balance > 4:            img_names.append(noncovid_names[noncovid_id])            noncovid_id += 1            balance = 0        elif balance < -4:            img_names.append(covid_names[covid_id])            covid_id += 1            balance = 0        else:            if random.random()>0.53 and covid_id< len(covid_names):                img_names.append(covid_names[covid_id])                covid_id += 1                if balance>=0:                    balance += 1                else:                    balance = 0            else:                img_names.append(noncovid_names[noncovid_id])                noncovid_id += 1                if balance<=0:                    balance -= 1                else:                    balance = 0        print(covid_id,noncovid_id)    for n in img_names:        if n in covid_names:            labels += ['CT_COVID']        elif n in noncovid_names:            labels += ['CT_NonCOVID']    for img_id in range(num_img):        img = img_names[img_id]        copyfile(img, 'F:\covid-19\COVID-CT\dataset_4_4\shuffle_data\{}.jpg'.format(img_id))    label = {'oldImageName':[os.path.split(name)[-1] for name in img_names],             'newImageName': ['{}.jpg'.format(img_id) for img_id in range(num_img)],             'label':list(labels)}    label = pd.DataFrame(label)    label.to_csv('F:\covid-19\COVID-CT\dataset_4_4\shuffle_data\label.csv')def check_same():    df = pd.read_csv('F:\covid-19\COVID-CT\dataset_4_4\shuffle_data\label.csv')    old_img_path = 'F:\covid-19\COVID-CT\dataset_4_4\\4_4_data_crop'    new_img_path = 'F:\covid-19\COVID-CT\dataset_4_4\shuffle_data'    for index,row in tqdm(df.iterrows()):        newImageName = row.newImageName        oldImageName = row.oldImageName        label = row.label        old_image = os.path.join(old_img_path,label,oldImageName)        new_image = os.path.join(new_img_path,newImageName)        old = cv2.imread(old_image)        new = cv2.imread(new_image)        if old.all()==new.all():            pass        else:            print(newImageName,oldImageName)def select_test():    test_names = []    for txt_name in ['testCT_COVID.txt','testCT_NonCOVID.txt']:        with open(os.path.join('F:\covid-19\COVID-CT\dataset_4_4\\4_4_txt_crop', txt_name)) as f:            test_names += [line.strip() for line in f.readlines()]    df = pd.read_csv('F:\covid-19\COVID-CT\dataset_4_4\shuffle_data\label.csv')    new_img_path = 'F:\covid-19\COVID-CT\dataset_4_4\shuffle_data'    move_img_path = 'F:\covid-19\COVID-CT\dataset_4_4\shuffle_test_data'    for index, row in tqdm(df.iterrows()):        newImageName = row.newImageName        oldImageName = row.oldImageName        label = row.label        if oldImageName in test_names:            new_image = os.path.join(new_img_path, newImageName)            move_image = os.path.join(move_img_path, newImageName)            copyfile(new_image, move_image)def COVID_Seg_select():    img_dir= 'F:\covid-19\COVID_SEG\\4_13\\rp_im'    lung_mask_dir = 'F:\covid-19\COVID_SEG\\4_13\\rp_lung_msk'    mask_dir = 'F:\covid-19\COVID_SEG\\4_13\\rp_msk'    save_img_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_select\med_seg'    save_lung_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_select\med_seg_lungmask'    save_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_select\med_seg_mask'    count = 0    for name in os.listdir(mask_dir):        mask_name_dir = os.path.join(mask_dir, name)        for img_name in os.listdir(mask_name_dir):            count += 1            mask_img_dir = os.path.join(mask_name_dir, img_name)            print(mask_img_dir)            mask = cv2.imread(mask_img_dir)            mask = np.array(mask)            if np.count_nonzero(mask) > 400:                img = cv2.imread(os.path.join(img_dir,name, img_name))                lung_mask = cv2.imread(os.path.join(lung_mask_dir,name, img_name))                img = cv2.flip(img,0)                mask = cv2.flip(mask,0)                lung_mask = cv2.flip(lung_mask,0)                save_img_path = os.path.join(save_img_dir,'{}_{}'.format(name,img_name))                save_lung_mask_path = os.path.join(save_lung_mask_dir,'{}_{}'.format(name,img_name))                save_mask_path = os.path.join(save_mask_dir,'{}_{}'.format(name,img_name))                cv2.imwrite(save_img_path,img)                cv2.imwrite(save_lung_mask_path,lung_mask)                cv2.imwrite(save_mask_path,mask)def Segtxt():    dirs = 'F:\covid-19\COVID-CT\dataset_4_27_with_seg\med_seg'    with open(os.path.join(dirs,'seg.txt'),'w') as f:        f.write('\n'.join(os.listdir(dirs)))def window(image,low=-50.,high =200.):    MIN_BOUND = low    MAX_BOUND = high    image = (image - MIN_BOUND) / (MAX_BOUND - MIN_BOUND)    image[image > 1] = 1.    image[image < 0] = 0.    return image*255def LUNA():    ids = []    basedir = 'F:\covid-19\COVID-CT\dataset_4_30_LUNA'    for item in os.listdir(basedir):        print(item)        if item.endswith('png'):            id = item.split('_')[0]            if id in ids:                img = cv2.imread(os.path.join(basedir, item))                save_img_path = os.path.join(basedir, id, item)                img = window(img).astype("uint8")                # img = adjust_gamma(img,gamma=1.5)                cv2.imwrite(save_img_path, img)            else:                # os.mkdir(os.path.join(basedir, id))                img = cv2.imread(os.path.join(basedir, item))                save_img_path = os.path.join(basedir, id, item)                img = window(img).astype("uint8")                # img = adjust_gamma(img, gamma=1.5)                cv2.imwrite(save_img_path, img)            ids.append(id)def detect_crop():    from_dir = 'F:\covid-19\COVID-CT\dataset_5_2\\5.2new_test-20200504T002244Z-001\\5.2new_test'    to_dir = 'F:\covid-19\COVID-CT\dataset_5_2\\5.2new_test-20200504T002244Z-001\\5.2new_test_crop'    for imgname in os.listdir(from_dir):        if imgname.endswith('png') or imgname.endswith('jpg'):            print(imgname)            img = cv2.imread(os.path.join(from_dir,imgname), 0)            # Do a threshold on the binary of the image            # Show the resulting image            ret,img_th = cv2.threshold(img,127,255,cv2.THRESH_BINARY)            kernel = np.ones((8, 8), np.uint8)            erosion = cv2.erode(img_th, kernel, iterations=1)            image, contours, hier = cv2.findContours(erosion, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)            x, y, w, h = 0, 0, 0, 0            for c in contours:                temp_x, temp_y, temp_w, temp_h = cv2.boundingRect(c)                if temp_w*temp_h>w*h:                    x, y, w, h = temp_x, temp_y, temp_w, temp_h            crop_img = img[y:y+h,x:x+w]            cv2.imwrite(os.path.join(to_dir, imgname), crop_img.copy())def LUNA_detect_mask_crop():    img_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train'    lung_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train_mask'    save_img_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train_crop'    save_lung_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train_crop_mask'    for imgname in os.listdir(img_dir):        print(imgname)        img = cv2.imread(os.path.join(img_dir, imgname), 0)        img = window(img).astype("uint8")        # Do a threshold on the binary of the image        # Show the resulting image        ret,img_th = cv2.threshold(img,80,255,cv2.THRESH_BINARY)        kernel = np.ones((8, 8), np.uint8)        erosion = cv2.erode(img_th, kernel, iterations=1)        image, contours, hier = cv2.findContours(erosion, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)        x, y, w, h = 0, 0, 0, 0        for c in contours:            temp_x, temp_y, temp_w, temp_h = cv2.boundingRect(c)            if temp_w*temp_h>w*h:                x, y, w, h = temp_x, temp_y, temp_w, temp_h        crop_img = img[y:y+h,x:x+w]        cv2.imwrite(os.path.join(save_img_dir, imgname), crop_img.copy())        lung_mask = cv2.imread(os.path.join(lung_mask_dir, imgname), 0)        crop_lung_mask = lung_mask[y:y + h, x:x + w]        if len(set(list(crop_lung_mask.flatten()))) == 4:            crop_lung_mask[crop_lung_mask==255] = 0        crop_lung_mask[crop_lung_mask > 0] = 255        cv2.imwrite(os.path.join(save_lung_mask_dir, imgname), crop_lung_mask.copy())def detect_mask_crop():    img_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_select\med_seg'    lung_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_select\med_seg_lungmask'    mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_select\med_seg_mask'    save_img_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_selectcrop\med_seg'    save_lung_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_selectcrop\med_seg_lungmask'    save_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\COVID_seg13_selectcrop\med_seg_mask'    for imgname in os.listdir(img_dir):        img = cv2.imread(os.path.join(img_dir,imgname), 0)        # Do a threshold on the binary of the image        # Show the resulting image        ret,img_th = cv2.threshold(img,127,255,cv2.THRESH_BINARY)        kernel = np.ones((8, 8), np.uint8)        erosion = cv2.erode(img_th, kernel, iterations=1)        image, contours, hier = cv2.findContours(erosion, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)        x, y, w, h = 0, 0, 0, 0        for c in contours:            temp_x, temp_y, temp_w, temp_h = cv2.boundingRect(c)            if temp_w*temp_h>w*h:                x, y, w, h = temp_x, temp_y, temp_w, temp_h        crop_img = img[y:y+h,x:x+w]        cv2.imwrite(os.path.join(save_img_dir, imgname), crop_img.copy())        lung_mask = cv2.imread(os.path.join(lung_mask_dir, imgname), 0)        crop_lung_mask = lung_mask[y:y + h, x:x + w]        crop_lung_mask[crop_lung_mask>0] = 255        cv2.imwrite(os.path.join(save_lung_mask_dir, imgname), crop_lung_mask.copy())        mask = cv2.imread(os.path.join(mask_dir, imgname), 0)        crop_mask = mask[y:y + h, x:x + w]        crop_mask[crop_mask > 0] = 255        cv2.imwrite(os.path.join(save_mask_dir, imgname), crop_mask.copy())def LUNA_train():    from_dir = 'F:\covid-19\COVID-CT\dataset_3_31\LUNA_data\LUNA_new\CT_NonCOVID'    to_dir = 'F:\covid-19\COVID-CT\dataset_5_1\LUNA_train'    test_txt = open(os.path.join(to_dir,'LUNA_test_meta.txt'))    test_list = [item.strip().split('_')[0] for item in test_txt.readlines()]    for imgname in os.listdir(from_dir):        if imgname.split('_')[0] in test_list:            pass        else:            print(imgname)            copyfile(os.path.join(from_dir, imgname), os.path.join(to_dir, imgname))def check_use():    covid = []    noncovid = []    txtdir = 'F:\covid-19\COVID-CT\dataset_5_5\dataset_5_5.5'    img_dir = 'F:\covid-19\COVID-CT\dataset_5_5\dataset_5_5.5\data\\4_4_data_crop'    lung_mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\dataset_5_5.5\data\med_seg_lungmask'    mask_dir = 'F:\covid-19\COVID-CT\dataset_5_5\dataset_5_5.5\data\med_seg_mask'    for txt in os.listdir(txtdir):        if txt.endswith('COVID.txt'):            f = open(os.path.join(txtdir,txt))            covid+=[line.strip() for line in f.readlines()]        if txt.endswith('NonCOVID.txt'):            f = open(os.path.join(txtdir, txt))            noncovid += [line.strip() for line in f.readlines()]    for type in ['CT_COVID','CT_NonCOVID']:        img_list = [line for line in os.listdir(os.path.join(img_dir,type))]        for img in img_list:            if img in covid and type == 'CT_COVID':                pass            elif img in noncovid and type == 'CT_NonCOVID':                pass            else:                os.remove(os.path.join(img_dir, type, img))    for type in ['CT_COVID','CT_NonCOVID']:        img_list = [line for line in os.listdir(os.path.join(lung_mask_dir,type))]        for img in img_list:            if img in covid and type == 'CT_COVID':                pass            elif img in noncovid and type == 'CT_NonCOVID':                pass            else:                os.remove(os.path.join(lung_mask_dir, type, img))if __name__ == '__main__':    # LUNA_split()    # train_test_split_CT()    # test_roc()    # create_spread_sheet()    # test_inter()    # to_txt()    # dicom2jpg('F:\covid-19\phantom\Phantom FDA','F:\covid-19\phantom\Phantom FDA dst')    # test_process()    # jpgout('F:\covid-19\phantom\Phantom FDA dst','dst')    # patient_split()    # select()    # fuse_data()    # process()    # check_same()    # select_test()    # old_negative()    # COVID_Seg_select()    # detect_mask_crop()    # LUNA()    # detect_crop()    # LUNA_mask_split()    # detect_mask_crop()    # detect_crop()    check_use()    # LUNA_detect_mask_crop()    # Segtxt()    # negative_split()    # combine_txt()x    # to_meta()