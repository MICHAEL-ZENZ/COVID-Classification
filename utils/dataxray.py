import torchfrom torch.utils.data import Datasetimport numpy as npimport osfrom PIL import Imagedef read_txt(txt_path):    with open(txt_path) as f:        lines = f.readlines()    txt_data = [line.strip().split() for line in lines]    return txt_dataclass CovidXRayDataset(Dataset):    """Covid XRay dataset."""    def __init__(self, txt_path, root_dir, transform=None):        """        Args:            txt_path (string): Path to the txt file with annotations.            root_dir (string): Directory with all the images.            transform (callable, optional): Optional transform to be applied                on a sample.        """        self.mapping = {'normal': 0, 'pneumonia': 1, 'COVID-19': 2}        self.txt_file = read_txt(txt_path)        self.root_dir = root_dir        self.transform = transform    def __len__(self):        return len(self.txt_file)    def __getitem__(self, idx):        if torch.is_tensor(idx):            idx = idx.tolist()        img_path = os.path.join(self.root_dir,                                self.txt_file[idx][1])        image = Image.open(img_path).convert('RGB')        if self.transform:            image = self.transform(image)        sample = {'img': image,                  'label': self.mapping[self.txt_file[idx][2]]}        return sampleif __name__ == '__main__':    trainset = CovidXRayDataset(txt_path='../train_split.txt',                                root_dir='../data/train')    print(trainset.__len__())